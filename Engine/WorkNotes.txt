[2017.12.17] Created project from https://github.com/planetchili/chili_framework.git and upgraded to Visual Studio 2017 using auto-magic tools.
[2017.12.17] Built project successfully.
[2017.12.17] Migrated project manually (cuz I couldn't get it to copy magically) into my own repository https://github.com/ectrimble20/CppGame.git
[2017.12.17] Building and checking in as master branch
[2017.12.17] Adding some of the classes I've worked on using the Chili Framework for implementation into my game.
[2017.12.19] Reworked Rect class to be a logic container rather than an extension of the Surface.
[2017.12.19] Converted Rect to use float rather than int because positions etc are all float based with the Vector2 class
[2017.12.19] Tested SpriteSheet imports, setup preload for 4 images including a font I created.
[2017.12.20] Finally got Font to work how I wanted it to, able to print font to the screen. Working on making it less clunky
[2017.12.20] Need to fix the Font class.  Currently only works for square fonts, needs to work with rectangluar fonts such as 7x16
[2017.12.20] Fixed the Font class to work with mixed size fonts, also fixed a bug with the width/height causing weird behavior with unevenly sized fonts.
[2017.12.21] Removed "Surface(const std::string& bitmapFilename);" construct from Surface, we do not build directly from a BMP now.  Removed fstream import as well.
[2017.12.21] Built Singleton Logging class to allow me to log from anywhere to a single log file, should make debugging a bit easier now.
[2017.12.21] Updated some of Rect's methods for const correctness
[2017.12.21] Added button class, working out how it's going to behave
[2017.12.22] Rethinking how I'm handling drawing sprites.  I feel like I need a Sprite class to actually pull all the drawing and positioning together.  Right now, you need
			 the ImageLibrary to hand you a BitmapImage which then needs to be mapped to a surface and then positioned with a Rect/Vector2 and then handed to the Graphics
			 DrawSurface method before it's rendered.  My thought is to define everything about a Sprite in it's declaration, such as size, position, which image or images
			 in the case of an animated gif to use.  Then extend the Sprite class for things like Buttons, Game elements/entities.  So that way I'm only having to actually
			 manage the sprites rather than try to manage all these individual parts, the Sprite class will manage that for me.